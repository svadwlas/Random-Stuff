
/*
The classic Big data example in real-time! Courtsesy: Apache Kafka Streams.


*/










import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KStreamBuilder;
import org.apache.kafka.streams.kstream.KTable;

import java.util.Arrays;
import java.util.Properties;


public class ClassicWordCountExample {
	
	
	
	public static void main(final String[] args) throws Exception{
		
		Properties config = new Properties()
		
		config.put(StreamsConfig.APPLICATION_ID_CONFIG, "classic-wordcount-app");
		config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "kafka-broker1:9092");
		config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());
		config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());
		
		
		KStreamBuilder builder = new KStreamBuilder;
		
		KStream<String, String> textLines = builder.stream("TextLinesTopic");
		KTable<String, Long> wordCounts = textLines.flatMapValues(
		textLine -> Arrays.asList(textLine.toLowerCase().split("\\w+")))
		.groupBy((key, word) -> word).count("Counts");
		
		wordCounts.to(Serdes.String(), Serdes.Long(), "WordsWithCountsTopic");
		
		KafkaStreams streams = new KafkaStreams(builder, config);
		
		streams.start();
		Runtime.getRuntime().addShutdownHook(new Thread(streams::close));
		
		
		
		
		
		
		
		
		
		
	}
	
	
	
	
	
}